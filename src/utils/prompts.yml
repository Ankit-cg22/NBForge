nb_to_module: |
  ### Jupyter Notebook Conversion to Python Module  

  #### Input Data:  
  - **Code Blocks:** {code_blocks}  
  - **Markdown Blocks:** {markdown_blocks}  

  #### Instructions:  
  Your task is to convert a Jupyter Notebook into a well-structured Python module. Follow these steps:  

  1. **File & Content Generation:**  
     - Provide a list of files along with their content.  
     - Use meaningful file names based on the codeâ€™s purpose.  
     - Organize the code into Python modules with appropriate class and function structures.  

  2. **Markdown Handling:**  
     - If a markdown block relates to a specific code block, include it as a comment in the corresponding Python file.  
     - If the markdown is generic (e.g., documentation or high-level overview), place it in a `README.md` file in the main directory.  

  3. **Requirements File:**  
     - Generate a `requirements.txt` file containing all the necessary dependencies used in the notebook.  

  4. **Setup file**  
     - Generate a `setup.md` file that includes:  
       - Steps to create a virtual environment.  
       - Commands to install dependencies from `requirements.txt`.  
       - Instructions on how to run the generated Python module. 
     - Add commands pertaining to platform : {platform}

  5. **Output Format:**  
     - Return the response as a **valid JSON array** (no preamble or explanations).  
     - Each JSON object must have two keys:  
       - `"fileName"`: Name of the file (e.g., `"module.py"`, `"README.md"`, `"requirements.txt"`, `"setup.md"`).  
       - `"fileContent"`: The corresponding file content as a string.
